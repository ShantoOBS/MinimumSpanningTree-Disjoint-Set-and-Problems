#include<iostream>
#include<bits/stdc++.h>
using namespace std;

vector<tuple<int,int,int>>edgeList,mst;
vector<int>parent;

bool sortByWeight(tuple<int,int,int>a,tuple<int,int,int>b)
{
    return (get<2>(a)<get<2>(b));
}
int findop(int u)
{
    if(parent[u]==-1)
    {
        return u;
    }
    else
    {
        return findop(parent[u]);
    }
}
void unoinop(int v,int u)
{
    parent[u]=v;
}
void kruskal(int v,int e)
{
    int i,j;
    i=0;
    j=0;
    while(i<v-1 && j<e)
    {
        tuple<int,int,int>x=edgeList[j];
        int sc=get<0>(x);
        int des=get<1>(x);
        int wt=get<2>(x);
        
        int arSc=findop(sc);
        int arDes=findop(des);
        
        if(arSc== arDes)
        {
            ++j;
            continue;
        }
        unoinop(arSc,arDes);
        
            mst.push_back(x);
            ++i;
    }
}
int main()
{
    int v,e,sc,des,wt;
   // cout<<"Number of the vertex and edge:";
    cin>>v>>e;
    
    for(int i=1;i<=e;i++)
    {
        //cout<<"Edge"<<i<<":";
        cin>>sc>>des>>wt;
        edgeList.push_back(make_tuple(sc,des,wt));
    }
    parent.resize(v,-1);
    sort(edgeList.begin(),edgeList.end(),sortByWeight);
    
    kruskal(v,e);
    for(auto u:mst)
    {
        cout<<get<0>(u)<<" "<<get<1>(u)<<" "<<get<2>(u)<<endl;
    }


}
