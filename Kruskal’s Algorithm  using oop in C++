#include <bits/stdc++.h>
using namespace std;
class DisjointSet {
    vector<int> parent, rank;

public:
    DisjointSet(int n) 
    {
        parent.resize(n + 1);
        rank.resize(n + 1, 0);

        for (int i = 0; i <= n; i++) 
        {
            parent[i] = i;
        }
    }

    int findPar(int node) 
    {
        if (node == parent[node])
            return node;

        return parent[node] = findPar(parent[node]);
    }

    void unionByRank(int u, int v) 
    {
        int up = findPar(u);
        int vp = findPar(v);

        if (up == vp)
            return;

        if (rank[up] < rank[vp]) 
        {
            parent[up] = vp;
        } 
        
        else if (rank[up] > rank[vp]) 
        {
            parent[vp] = up;
        } 
        
        else 
        {
            parent[up] = vp;
            rank[vp]++;
        }
    }
};

int main() 
{
    
    
    vector<vector<int>> edges = {{0, 1, 2}, {0, 2, 1}, {1, 2, 1}, {2, 3, 2}, {3, 4, 1}, {4, 2, 2}};
    int n=edges.size();
    vector<pair<int, pair<int, int>>> adj;

    for (auto& edge : edges) 
    {
        int u = edge[0];
        int v = edge[1];
        int wt = edge[2];

        adj.push_back({wt, {u, v}});
    }

    DisjointSet ds(n);
    sort(adj.begin(), adj.end());

    int cnt = 0;

    for (auto& it : adj) 
    {
        int wt = it.first;
        int u = it.second.first;
        int v = it.second.second;

        if (ds.findPar(u) != ds.findPar(v)) 
        {
            cnt += wt;
            ds.unionByRank(u, v);
        }
    }

    cout<<cnt;
}
