#include <iostream>
#include<bits/stdc++.h>
using namespace std;
vector<pair<int,int> > edgeList;
vector<int> parent;

int findOp(int u)
{
    if(parent[u] ==-1)
    {
        return u;
    }
    else
    {
        return findOp(parent[u]);
    }
}

void unionOp(int u,int v)
{
    parent[v] = u;
}

bool findCycleinUG()
{
    bool result = false;
    
    for(auto e:edgeList)
    {
        int sc = e.first;
        int des = e.second;
        
        int arSc = findOp(sc);
        int arDes = findOp(des);
        
        if(arSc == arDes)
        {
            result = true;
            break;
        }
        else
        {
            unionOp(arSc,arDes);
        }
    }
 return result;
}

int main() {
    int v,e;
    cin>>v>>e;
    parent.resize(v,-1);
    int sc,des;
    
    for(int x=1;x<=e;x++)
    {
        cout<<"Edge "<<x<<"(sc,des):";
        cin>>sc>>des;
        
        edgeList.push_back(make_pair(sc,des));
    }
    
    //  true = cycle exist
    bool result = findCycleinUG();
    if(result == true) cout<<"Cycle exists";
    else cout<<"Cycle not exists";
    
}
